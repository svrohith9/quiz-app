{"version":3,"sources":["components/Questions.style.ts","API.tsx","components/Questions.tsx","utils.ts","App.style.ts","App.tsx","index.tsx"],"names":["DIFFICULTY","Wrapper","styled","div","ButtonWrapper","Question","question","answers","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","disabled","value","onClick","fetchQuizData","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startQuiz","MEDIUM","newQuestions","length","undefined","e","currentTarget","correct","prev","answerObj","correctAnswer","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65f9d44a.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1000px;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const ButtonWrapper = styled.div`\r\n  transition: all 0.2s ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n  }\r\n`;\r\n","import Question from \"./components/Questions\";\r\nimport { shuffleArray } from \"./utils\";\r\n\r\nexport type Question = {\r\n    category: string;\r\n    correct_answer: string,\r\n    incorrect_answers: string[];\r\n    difficulty: string;\r\n    question: string;\r\n    type: string;\r\n}\r\n\r\n//Adding common variable property for all answers\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum DIFFICULTY {\r\n\r\n    EASY = \"easy\",\r\n    MEDIUM = \"medium\",\r\n    HARD = \"hard\",\r\n}\r\n\r\nexport const fetchQuizData = async (amount: number, difficulty: DIFFICULTY) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&category=9&difficulty=${difficulty}&type=multiple`\r\n    const data = await (await fetch(endpoint)).json();\r\n\r\n    // adding a new variable answers which consist of both correct and incorrect answers\r\n    return data.results.map((question: Question) => (\r\n        {\r\n            ...question,\r\n            answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\r\n        }\r\n    )\r\n    );\r\n}","import React from 'react';\r\nimport { Wrapper } from './Questions.style';\r\nimport { ButtonWrapper } from './Questions.style';\r\n\r\ntype Props = {\r\n    question: string;\r\n    answers: string[];\r\n    callback: any;\r\n    userAnswer: any;\r\n    questionNumber: number;\r\n    totalQuestions: number;\r\n}\r\nconst Question: React.FC<Props> = (\r\n    {\r\n        question, answers, callback, userAnswer, questionNumber, totalQuestions }) => (\r\n    <Wrapper>\r\n        <p className='number'>\r\n            Question: {questionNumber}/{totalQuestions}\r\n        </p>\r\n        <p dangerouslySetInnerHTML={{ __html: question }} />\r\n        {/* {console.log(question, answers, callback, userAnswer, questionNumber, totalQuestions)} */}\r\n        <div>\r\n            {answers.map((answer) => (\r\n                <ButtonWrapper key={answer} >\r\n                    <button disabled={userAnswer} value={answer} onClick={callback}>\r\n                        <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n                    </button>\r\n                </ButtonWrapper>\r\n            ))}\r\n        </div>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Question;","export const shuffleArray = (array: any[])=>\r\n[...array].sort(()=>Math.random() - 0.5);","import styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n html{\r\n     height :100%;\r\n }\r\n\r\n body{\r\n     margin: 0;\r\n     padding: 0 20px;\r\n     display: flex;\r\n     justify-content: center;\r\n }\r\n\r\n * {\r\n     box-sizing: border-box;\r\n     \r\n}\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  > p {\r\n    color: #fff;\r\n  }\r\n  .score {\r\n    color: #fff;\r\n    margin: 0;\r\n  }\r\n\r\n  .start,\r\n  .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #fff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    broder-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n  .start {\r\n    max-width: 20px;\r\n  }\r\n`;\r\n","import userEvent from '@testing-library/user-event';\r\nimport React, { useState } from 'react';\r\nimport { DIFFICULTY, fetchQuizData, QuestionState } from './API';\r\nimport { GlobalStyle } from './App.style';\r\nimport Question from './components/Questions';\r\n\r\nconst TOTAL_QUESTIONS = 10;\r\n\r\nexport type AnswerObj = {\r\n  question: string;\r\n  answer: string;\r\n  correct: boolean;\r\n  correctAnswer: string;\r\n}\r\n\r\nconst App = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\r\n  const [number, setNumber] = useState(0);\r\n  const [userAnswers, setUserAnswers] = useState<AnswerObj[]>([]);\r\n  const [score, setScore] = useState(0);\r\n  const [gameOver, setGameOver] = useState(true);\r\n\r\n\r\n  const startQuiz = async () => {\r\n    setLoading(true);\r\n    setGameOver(false);\r\n    const newQuestions = await fetchQuizData(TOTAL_QUESTIONS, DIFFICULTY.MEDIUM);\r\n    setQuestions(newQuestions);\r\n    setScore(0);\r\n    setUserAnswers([]);\r\n    setNumber(0);\r\n    setLoading(false);\r\n    // console.log(newQuestions);\r\n  };\r\n\r\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    if (!gameOver) {\r\n      const answer = e.currentTarget.value;\r\n      const correct = questions[number].correct_answer === answer;\r\n      if (correct) setScore(prev => prev + 1);\r\n\r\n      const answerObj = {\r\n        question: questions[number].question,\r\n        answer,\r\n        correct,\r\n        correctAnswer: questions[number].correct_answer,\r\n      }\r\n      setUserAnswers((prev) => [...prev, answerObj])\r\n    }\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n\r\n    const nextQuestion = number + 1;\r\n    if (nextQuestion === TOTAL_QUESTIONS) {\r\n      setGameOver(true);\r\n    }\r\n    else {\r\n      setNumber(number + 1)\r\n    }\r\n\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <div className='App'>\r\n        <h1>Quiz</h1>\r\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\r\n          <button className=\"start\" onClick={startQuiz}>\r\n            start\r\n          </button>\r\n        ) : null}\r\n        {/* start of quiz */}\r\n        {!gameOver ? <p className=\"score\">Score :- {score}</p> : null}\r\n        {loading ? <p>Loading ...</p> : null}\r\n        {!loading && !gameOver && (< Question\r\n          questionNumber={number + 1}\r\n          totalQuestions={TOTAL_QUESTIONS}\r\n          question={questions[number].question}\r\n          answers={questions[number].answers}\r\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\r\n          callback={checkAnswer}\r\n        />)}\r\n        {!gameOver && !loading && userAnswers.length === number + 1\r\n          && number !== TOTAL_QUESTIONS - 1 ? (\r\n            < button className='next' onClick={nextQuestion}>Next</button>\r\n          ) : null}\r\n      </div >\r\n    </>\r\n  );\r\n}\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}